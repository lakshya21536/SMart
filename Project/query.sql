-- Display all the orders and the corresponding customer details where the order date is between two specific dates and the customer has placed at least 5 orders
SELECT o.Order_ID, c.Customer_ID
FROM Order_ o 
JOIN Customer c ON o.Customer_ID = c.Customer_ID
WHERE o.Order_Date BETWEEN '01/01/2022' AND '31/12/2022'
GROUP BY o.Order_ID, c.Customer_ID
HAVING COUNT(o.Order_ID) >= 1;

-- Display revenue generated by each product
SELECT p.Product_ID, SUM(p.cart_quantity * p.price) AS total_revenue
FROM Product p
JOIN contains_ c ON p.product_id = c.product_id
JOIN order_ o ON c.order_id = o.order_id
WHERE o.order_status = 'shipped'
GROUP BY p.product_id
ORDER BY total_revenue DESC;

-- Show all customers who have made an order with a total value greater than the average total value of all orders.
SELECT *
FROM customer
WHERE Customer_ID IN (
  SELECT Order_.Customer_ID
  FROM order_
  INNER JOIN (
    SELECT Order_.Order_ID, SUM(Cart_Quantity * Price) AS Order_Total
    FROM contains_
    INNER JOIN product ON contains_.Product_ID = product.Product_id
    INNER JOIN order_ ON contains_.Order_ID = order_.Order_ID
    WHERE order_.Order_Status = 'shipped'
    GROUP BY Order_.Order_ID
  ) AS order_total ON order_.Order_ID = order_total.Order_ID
  WHERE Order_Total > (
    SELECT AVG(Order_Total)
    FROM (
      SELECT order_.Order_ID, SUM(Cart_Quantity * Price) AS Order_Total
      FROM contains_
      INNER JOIN product ON contains_.Product_ID = product.Product_id
      INNER JOIN order_ ON contains_.Order_ID = order_.Order_ID
      WHERE order_.Order_Status = 'shipped'
      GROUP BY order_.Order_ID
    ) AS order_total_avg
  )
);

-- Total quantity a particular product has been ordered
SELECT p.product_id, SUM(p.cart_quantity) AS total_quantity
FROM product p
JOIN contains_ oi ON p.product_id = oi.product_id
GROUP BY p.product_id
ORDER BY total_quantity DESC;


-- Products that haven't been ordered
SELECT p.product_id
FROM product p
LEFT JOIN contains_ oi ON p.product_id = oi.product_id
WHERE oi.product_id IS NULL;


-- Number of Distinct Products Ordered
SELECT c.Customer_ID, COUNT(DISTINCT od.Product_ID) AS NumProductsOrdered
FROM customer c
JOIN order_ o ON c.Customer_ID = o.Customer_ID
JOIN contains_ od ON o.Order_ID = od.Order_ID
GROUP BY c.Customer_ID;


-- TOP 10 customer
SELECT c.Customer_ID, SUM(p.Price * p.Cart_Quantity) AS TotalValue
FROM customer c
JOIN order_ o ON c.Customer_ID = o.Customer_ID
JOIN contains_ co ON o.Order_ID = co.Order_ID
JOIN product p ON co.Product_ID = p.Product_ID
GROUP BY c.Customer_ID
ORDER BY TotalValue DESC
LIMIT 10;


-- Average price of products supplied by each supplier
SELECT s.Full_Name, AVG(p.Price) AS Average_Price
FROM supplier s
JOIN supplies sp ON s.Supplier_ID = sp.Supplier_ID
JOIN product p ON sp.Product_ID = p.Product_id
GROUP BY s.Supplier_ID;


-- Update the inventory reorder flag for all products that have less than 10 units in stock.
UPDATE inventory i
SET i.Reorder = 'True'
WHERE i.Inventory_ID IN (
    SELECT p.Inventory_ID
    FROM product p
    WHERE p.Inventory_Quantity < 10
);


-- Select all the products that have not been ordered between two dates.
SELECT p.ProductName
FROM product p
LEFT JOIN contains_ c ON p.Product_id = c.Product_ID
LEFT JOIN order_ o ON c.Order_ID = o.Order_ID
WHERE (o.Order_Date IS NULL OR STR_TO_DATE(o.Order_Date, '%d/%m/%Y') NOT BETWEEN STR_TO_DATE('01/01/2022', '%d/%m/%Y') AND STR_TO_DATE('31/12/2022', '%d/%m/%Y'));

-- Cacluate a decreasing order product which has been most purchased between two dates using date format dd/mm/yyyy
SELECT p.ProductName, SUM(p.Cart_Quantity) AS TotalQuantity
FROM product p
JOIN contains_ c ON p.Product_id = c.Product_ID
JOIN order_ o ON c.Order_ID = o.Order_ID
WHERE STR_TO_DATE(o.Order_Date, '%d/%m/%Y') BETWEEN STR_TO_DATE('01/01/2022', '%d/%m/%Y') AND STR_TO_DATE('31/12/2022', '%d/%m/%Y')
GROUP BY p.Product_id
ORDER BY TotalQuantity DESC;